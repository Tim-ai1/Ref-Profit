count = [(23452,), (1234234,)]
count = [str(el[0]) for el in count]
print(count)
count = '\n'.join(count)
print(count)



# import aiosqlite, sqlite3, aiogram
# from aiogram.types import Message
# from aiogram.fsm.context import FSMContext
# from states import Form
# from referral_storage import process_pending_referral
# from dotenv import load_dotenv
# import os
#
# load_dotenv()
# TOKEN = os.getenv("BOT_TOKEN")
# bot = aiogram.Bot(TOKEN)
# DB_PATH = os.getenv('DATABASE_PATH', 'Form.db')
#
#
# def get_ids():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute('SELECT ID FROM Form')
#     ids = cursor.fetchall()
#     ids = [item[0] for item in ids]
#     return ids
#
#
# async def start_form(message: Message, state: FSMContext):
#
#     user_id = message.from_user.id
#     if user_id in get_ids():
#         await message.answer("–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É!")
#         return
#
#     await state.set_state(Form.name)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#
#
# async def process_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await state.set_state(Form.age)
#     await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
#
#
# async def process_age(message: Message, state: FSMContext):
#     if not message.text.isdigit():
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
#         return
#     await state.update_data(age=int(message.text))
#     await state.set_state(Form.passport)
#     await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∞—Å–ø–æ—Ä—Ç –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –†–§?")
#
#
# async def process_passport(message: Message, state: FSMContext):
#     await state.update_data(passport=message.text)
#     await state.set_state(Form.zarplata)
#     await message.answer("–ù–∞ –∫–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?")
#
#
# async def process_zarplata(message: Message, state: FSMContext):
#     await state.update_data(zarplata=message.text)
#     await state.set_state(Form.hobbies)
#     await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏, —Ö–æ–±–±–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫):")
#
#
# async def process_hobbies(message: Message, state: FSMContext):
#     await state.update_data(hobbies=message.text)
#     await state.set_state(Form.banks)
#     await message.answer("–ö–∞–∫–∏–º –±–∞–Ω–∫–æ–º –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)")
#
#
# async def process_banks(message: Message, state: FSMContext):
#     await state.update_data(banks=message.text)
#     data = await state.get_data()
#     print(dict(data))
#     await state.clear()
#     conn = await aiosqlite.connect('Form.db')
#     cursor = await conn.cursor()
#     await cursor.execute("SELECT COUNT(*) FROM Form")
#     number = await cursor.fetchone()
#     number = number[0] + 220
#     await cursor.execute("INSERT INTO Form (Name, Age, Passport, Zarplata, Banks, ID, Code, Balance, Status, Username, "
#                          "Hobbies) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (data["name"], data['age'],
#                         data['passport'], data['zarplata'], data['banks'], message.from_user.id, number, 0, '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
#                         message.from_user.username, data['hobbies']))
#     await conn.commit()
#     await message.answer(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –í–∞—à –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {int(number)}")
#     await bot.send_message(5262838200, 'üòé –ù–æ–≤–∞—è <a href="tg://user?id={referrer_id}">—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>!', parse_mode='HTML')
#     await process_pending_referral(message.from_user.id, bot)
#
